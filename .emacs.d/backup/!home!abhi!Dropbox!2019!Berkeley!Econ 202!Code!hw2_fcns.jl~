
function closest(val::Float64, v::Array{Float64,1})
    return findmin(abs.(v .- val))[2]
end

function V_iterate(V::Matrix{Float64}, Π::Matrix{Float64},
                   β::Float64, μ::Float64, ρ::Float64, θ::Float64, K::Float64,
                   a::Vector{Float64}, rp::Vector{Float64},
                   P_a::Matrix{Float64}, P_rp::Matrix{Float64})
    V_new = zeros(size(V))
    policy = zeros(size(V))
    w = (θ - 1)/θ
    n_a = length(a)
    n_rp = length(rp)

    # EV[i,j] gives E_t[V(rp_t+1,a_t+1) | rp_t, a_t]
    # E_(P_a)[V_a] = P_a * V_a implies the following (where V_a is n_a by 1)
    EV = P_rp * V * P_a'

    no_change = Π + β * EV
    # once we decide to change, same choice ∀ old rp given a
    change_returns = Π + β * EV .- w*K
    change_results = [findmax(change_returns[:,i]) for i in 1:n_a]
    change_values = [x[1] for x in change_results]
    change_choices = [x[2] for x in change_results]
    change = repeat(change_values', n_rp)

    # might be a better way of doing this
    for i in 1:n_rp
        for j in 1:n_a
            if no_change[i,j] >= change[i,j]
                policy[i,j] = rp[i]
                V_new[i,j] = no_change[i,j]
            else
                policy[i,j] = rp[change_choices[j]] # record choice of rp as fcn of a
                V_new[i,j] = change[i,j]
            end
        end
    end
    return V_new, policy
end

function V_iteration(V_tol::Float64, V::Matrix{Float64}, Π::Matrix{Float64},
                     β::Float64, μ::Float64, ρ::Float64, θ::Float64, K::Float64,
                     a::Vector{Float64}, rp::Vector{Float64},
                     P_a::Matrix{Float64}, P_rp::Matrix{Float64})
    rel_diff = 1.
    k = 0
    policy = zeros(size(V))
    while rel_diff > V_tol && k < 20000
        k += 1
        V_new, policy = V_iterate(V, Π, β, μ, ρ, θ, K, a, rp, P_a, P_rp)
        rel_diff = norm(V_new - V)
        V = V_new
        if k % 100 == 0
            println("iteration: $k  relative diff: $(round(rel_diff,digits=8))")
        end
    end
    println("done")
    return V, policy
end


function test_EV(V, P_a, P_rp)
    n_rp = size(P_rp)[1]
    n_a = size(P_a)[1]

    # E_(P_a)[V_a] = P_a * V_a implies the following (V_a is n_a by 1)
    # EV[i,j] gives E_t[V(rp_t+1,a_t+1) | rp_t, a_t]
    EV_1 = P_rp * V * P_a'

    # P[k,l|i,j] = P[k|i]*P[l|j] since a and rp are independant processes
    # EV[i,j] is then dot product of probs from i,j to all k,l with V
    EV_2 = zeros(size(V))
    for i in 1:n_rp
        for j in 1:n_a
            EV_2[i,j] = dot(P_rp[i,:] * P_a[j,:]', V)
        end
    end

    return EV_1, EV_2, all(EV_1 .≈ EV_2)
end
